// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "wmb-rest-api/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// DiscountRepositoryInterface is an autogenerated mock type for the DiscountRepositoryInterface type
type DiscountRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: d
func (_m *DiscountRepositoryInterface) Create(d *entity.Discount) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Discount) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: d
func (_m *DiscountRepositoryInterface) Delete(d *entity.Discount) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Discount) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAssociation provides a mock function with given fields: c, table, delVal
func (_m *DiscountRepositoryInterface) DeleteAssociation(c *entity.Discount, table string, delVal interface{}) error {
	ret := _m.Called(c, table, delVal)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Discount, string, interface{}) error); ok {
		r0 = rf(c, table, delVal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: by
func (_m *DiscountRepositoryInterface) FindAll(by map[string]interface{}) ([]entity.Discount, error) {
	ret := _m.Called(by)

	var r0 []entity.Discount
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []entity.Discount); ok {
		r0 = rf(by)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Discount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(by)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: d
func (_m *DiscountRepositoryInterface) FindById(d *entity.Discount) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Discount) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByIdPreload provides a mock function with given fields: c, preload
func (_m *DiscountRepositoryInterface) FindByIdPreload(c *entity.Discount, preload string) error {
	ret := _m.Called(c, preload)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Discount, string) error); ok {
		r0 = rf(c, preload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: d
func (_m *DiscountRepositoryInterface) Update(d *entity.Discount) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Discount) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDiscountRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewDiscountRepositoryInterface creates a new instance of DiscountRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDiscountRepositoryInterface(t mockConstructorTestingTNewDiscountRepositoryInterface) *DiscountRepositoryInterface {
	mock := &DiscountRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
