// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "wmb-rest-api/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// CustomerRepositoryInterface is an autogenerated mock type for the CustomerRepositoryInterface type
type CustomerRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: c
func (_m *CustomerRepositoryInterface) Create(c *entity.Customer) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: c
func (_m *CustomerRepositoryInterface) Delete(c *entity.Customer) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAssociation provides a mock function with given fields: c, table, delVal
func (_m *CustomerRepositoryInterface) DeleteAssociation(c *entity.Customer, table string, delVal interface{}) error {
	ret := _m.Called(c, table, delVal)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer, string, interface{}) error); ok {
		r0 = rf(c, table, delVal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: by
func (_m *CustomerRepositoryInterface) FindAll(by map[string]interface{}) ([]entity.Customer, error) {
	ret := _m.Called(by)

	var r0 []entity.Customer
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []entity.Customer); ok {
		r0 = rf(by)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(by)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: c
func (_m *CustomerRepositoryInterface) FindById(c *entity.Customer) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByIdPreload provides a mock function with given fields: c, preload
func (_m *CustomerRepositoryInterface) FindByIdPreload(c *entity.Customer, preload string) error {
	ret := _m.Called(c, preload)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer, string) error); ok {
		r0 = rf(c, preload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByPhone provides a mock function with given fields: c
func (_m *CustomerRepositoryInterface) FindByPhone(c *entity.Customer) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindFirtst provides a mock function with given fields: by
func (_m *CustomerRepositoryInterface) FindFirtst(by map[string]interface{}) (entity.Customer, error) {
	ret := _m.Called(by)

	var r0 entity.Customer
	if rf, ok := ret.Get(0).(func(map[string]interface{}) entity.Customer); ok {
		r0 = rf(by)
	} else {
		r0 = ret.Get(0).(entity.Customer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(by)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c
func (_m *CustomerRepositoryInterface) Update(c *entity.Customer) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCustomerRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomerRepositoryInterface creates a new instance of CustomerRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerRepositoryInterface(t mockConstructorTestingTNewCustomerRepositoryInterface) *CustomerRepositoryInterface {
	mock := &CustomerRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
