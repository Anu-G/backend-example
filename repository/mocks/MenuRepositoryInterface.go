// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "wmb-rest-api/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// MenuRepositoryInterface is an autogenerated mock type for the MenuRepositoryInterface type
type MenuRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: m
func (_m *MenuRepositoryInterface) Create(m *entity.Menu) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Menu) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePrice provides a mock function with given fields: mp
func (_m *MenuRepositoryInterface) CreatePrice(mp *entity.MenuPrice) error {
	ret := _m.Called(mp)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.MenuPrice) error); ok {
		r0 = rf(mp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: m
func (_m *MenuRepositoryInterface) Delete(m *entity.Menu) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Menu) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAssociation provides a mock function with given fields: model, table, delVal
func (_m *MenuRepositoryInterface) DeleteAssociation(model *entity.Menu, table string, delVal interface{}) error {
	ret := _m.Called(model, table, delVal)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Menu, string, interface{}) error); ok {
		r0 = rf(model, table, delVal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: by
func (_m *MenuRepositoryInterface) FindAll(by map[string]interface{}) ([]entity.Menu, error) {
	ret := _m.Called(by)

	var r0 []entity.Menu
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []entity.Menu); ok {
		r0 = rf(by)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Menu)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(by)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: m
func (_m *MenuRepositoryInterface) FindById(m *entity.Menu) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Menu) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByIdAndPrice provides a mock function with given fields: m, mp, preload
func (_m *MenuRepositoryInterface) FindByIdAndPrice(m *entity.Menu, mp *entity.MenuPrice, preload string) error {
	ret := _m.Called(m, mp, preload)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Menu, *entity.MenuPrice, string) error); ok {
		r0 = rf(m, mp, preload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByIdPreload provides a mock function with given fields: m, preload
func (_m *MenuRepositoryInterface) FindByIdPreload(m *entity.Menu, preload string) error {
	ret := _m.Called(m, preload)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Menu, string) error); ok {
		r0 = rf(m, preload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindLatestMenuPrice provides a mock function with given fields: m
func (_m *MenuRepositoryInterface) FindLatestMenuPrice(m *entity.Menu) (entity.MenuPrice, error) {
	ret := _m.Called(m)

	var r0 entity.MenuPrice
	if rf, ok := ret.Get(0).(func(*entity.Menu) entity.MenuPrice); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(entity.MenuPrice)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Menu) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMenuByMenuPrice provides a mock function with given fields: t
func (_m *MenuRepositoryInterface) FindMenuByMenuPrice(t *entity.MenuPrice) (entity.Menu, error) {
	ret := _m.Called(t)

	var r0 entity.Menu
	if rf, ok := ret.Get(0).(func(*entity.MenuPrice) entity.Menu); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(entity.Menu)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.MenuPrice) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMenuPriceById provides a mock function with given fields: t
func (_m *MenuRepositoryInterface) FindMenuPriceById(t *entity.MenuPrice) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.MenuPrice) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: m
func (_m *MenuRepositoryInterface) Update(m *entity.Menu) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Menu) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMenuRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenuRepositoryInterface creates a new instance of MenuRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenuRepositoryInterface(t mockConstructorTestingTNewMenuRepositoryInterface) *MenuRepositoryInterface {
	mock := &MenuRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
