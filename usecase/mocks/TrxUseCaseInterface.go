// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "wmb-rest-api/model/dto"
	entity "wmb-rest-api/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// TrxUseCaseInterface is an autogenerated mock type for the TrxUseCaseInterface type
type TrxUseCaseInterface struct {
	mock.Mock
}

// CheckBalance provides a mock function with given fields: c
func (_m *TrxUseCaseInterface) CheckBalance(c *entity.Customer) (dto.LopeiBalance, error) {
	ret := _m.Called(c)

	var r0 dto.LopeiBalance
	if rf, ok := ret.Get(0).(func(*entity.Customer) dto.LopeiBalance); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(dto.LopeiBalance)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Customer) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransaction provides a mock function with given fields: crtrx
func (_m *TrxUseCaseInterface) CreateTransaction(crtrx *dto.CreateTransaction) (int, error) {
	ret := _m.Called(crtrx)

	var r0 int
	if rf, ok := ret.Get(0).(func(*dto.CreateTransaction) int); ok {
		r0 = rf(crtrx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.CreateTransaction) error); ok {
		r1 = rf(crtrx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRevenue provides a mock function with given fields: rev
func (_m *TrxUseCaseInterface) GetRevenue(rev *dto.Revenue) error {
	ret := _m.Called(rev)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.Revenue) error); ok {
		r0 = rf(rev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PayAndFinishTransaction provides a mock function with given fields: pay
func (_m *TrxUseCaseInterface) PayAndFinishTransaction(pay *dto.PaymentMethod) (dto.BillPrintOut, error) {
	ret := _m.Called(pay)

	var r0 dto.BillPrintOut
	if rf, ok := ret.Get(0).(func(*dto.PaymentMethod) dto.BillPrintOut); ok {
		r0 = rf(pay)
	} else {
		r0 = ret.Get(0).(dto.BillPrintOut)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.PaymentMethod) error); ok {
		r1 = rf(pay)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTrxUseCaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewTrxUseCaseInterface creates a new instance of TrxUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTrxUseCaseInterface(t mockConstructorTestingTNewTrxUseCaseInterface) *TrxUseCaseInterface {
	mock := &TrxUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
