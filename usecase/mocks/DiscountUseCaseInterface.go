// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "wmb-rest-api/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// DiscountUseCaseInterface is an autogenerated mock type for the DiscountUseCaseInterface type
type DiscountUseCaseInterface struct {
	mock.Mock
}

// CreateDiscount provides a mock function with given fields: d
func (_m *DiscountUseCaseInterface) CreateDiscount(d *entity.Discount) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Discount) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDiscount provides a mock function with given fields: d
func (_m *DiscountUseCaseInterface) DeleteDiscount(d *entity.Discount) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Discount) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDiscountByID provides a mock function with given fields: d
func (_m *DiscountUseCaseInterface) GetDiscountByID(d *entity.Discount) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Discount) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDiscount provides a mock function with given fields: d
func (_m *DiscountUseCaseInterface) UpdateDiscount(d *entity.Discount) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Discount) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDiscountUseCaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewDiscountUseCaseInterface creates a new instance of DiscountUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDiscountUseCaseInterface(t mockConstructorTestingTNewDiscountUseCaseInterface) *DiscountUseCaseInterface {
	mock := &DiscountUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
