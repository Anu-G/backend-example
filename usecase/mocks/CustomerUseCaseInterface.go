// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "wmb-rest-api/model/dto"
	entity "wmb-rest-api/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// CustomerUseCaseInterface is an autogenerated mock type for the CustomerUseCaseInterface type
type CustomerUseCaseInterface struct {
	mock.Mock
}

// DeleteCustomer provides a mock function with given fields: c
func (_m *CustomerUseCaseInterface) DeleteCustomer(c *entity.Customer) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: c
func (_m *CustomerUseCaseInterface) FindById(c *entity.Customer) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByIdPreload provides a mock function with given fields: c
func (_m *CustomerUseCaseInterface) FindByIdPreload(c *entity.Customer) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByPhone provides a mock function with given fields: c
func (_m *CustomerUseCaseInterface) FindByPhone(c *entity.Customer) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadOrCreateCustomer provides a mock function with given fields: c
func (_m *CustomerUseCaseInterface) ReadOrCreateCustomer(c *entity.Customer) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCustomer provides a mock function with given fields: cr
func (_m *CustomerUseCaseInterface) UpdateCustomer(cr *dto.CustomerRequest) (entity.Customer, error) {
	ret := _m.Called(cr)

	var r0 entity.Customer
	if rf, ok := ret.Get(0).(func(*dto.CustomerRequest) entity.Customer); ok {
		r0 = rf(cr)
	} else {
		r0 = ret.Get(0).(entity.Customer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.CustomerRequest) error); ok {
		r1 = rf(cr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCustomerUseCaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomerUseCaseInterface creates a new instance of CustomerUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerUseCaseInterface(t mockConstructorTestingTNewCustomerUseCaseInterface) *CustomerUseCaseInterface {
	mock := &CustomerUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
