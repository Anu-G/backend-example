// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "wmb-rest-api/model/dto"
	entity "wmb-rest-api/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// MenuUseCaseInterface is an autogenerated mock type for the MenuUseCaseInterface type
type MenuUseCaseInterface struct {
	mock.Mock
}

// CreateMenu provides a mock function with given fields: mr
func (_m *MenuUseCaseInterface) CreateMenu(mr *dto.MenuRequest) (entity.Menu, error) {
	ret := _m.Called(mr)

	var r0 entity.Menu
	if rf, ok := ret.Get(0).(func(*dto.MenuRequest) entity.Menu); ok {
		r0 = rf(mr)
	} else {
		r0 = ret.Get(0).(entity.Menu)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.MenuRequest) error); ok {
		r1 = rf(mr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMenu provides a mock function with given fields: m
func (_m *MenuUseCaseInterface) DeleteMenu(m *entity.Menu) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Menu) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindMenuPriceAndMenu provides a mock function with given fields: t
func (_m *MenuUseCaseInterface) FindMenuPriceAndMenu(t *entity.MenuPrice) (entity.Menu, error) {
	ret := _m.Called(t)

	var r0 entity.Menu
	if rf, ok := ret.Get(0).(func(*entity.MenuPrice) entity.Menu); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(entity.Menu)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.MenuPrice) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMenu provides a mock function with given fields: t
func (_m *MenuUseCaseInterface) GetMenu(t *entity.Menu) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Menu) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMenuPrice provides a mock function with given fields: t
func (_m *MenuUseCaseInterface) GetMenuPrice(t *entity.Menu) (entity.MenuPrice, error) {
	ret := _m.Called(t)

	var r0 entity.MenuPrice
	if rf, ok := ret.Get(0).(func(*entity.Menu) entity.MenuPrice); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(entity.MenuPrice)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Menu) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMenuPriceById provides a mock function with given fields: t
func (_m *MenuUseCaseInterface) GetMenuPriceById(t *entity.MenuPrice) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.MenuPrice) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMenu provides a mock function with given fields: mr
func (_m *MenuUseCaseInterface) UpdateMenu(mr *dto.MenuRequest) (entity.Menu, error) {
	ret := _m.Called(mr)

	var r0 entity.Menu
	if rf, ok := ret.Get(0).(func(*dto.MenuRequest) entity.Menu); ok {
		r0 = rf(mr)
	} else {
		r0 = ret.Get(0).(entity.Menu)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.MenuRequest) error); ok {
		r1 = rf(mr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMenuUseCaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenuUseCaseInterface creates a new instance of MenuUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenuUseCaseInterface(t mockConstructorTestingTNewMenuUseCaseInterface) *MenuUseCaseInterface {
	mock := &MenuUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
